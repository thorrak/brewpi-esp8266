name: Build

on:
  push:
    branches:
      - experimental
      - master
    # tags:
    #   - "v*"
  # pull_request:
  #   types: [ open, synchronize, edited, reopened, closed ]

jobs:
  build:
    name: Build bins for ${{ matrix.pio_env }}
    strategy:
      # Ensure that a builder finishes even if another fails
      fail-fast: false
      matrix:
        pio_env: ['esp32_wifi_tft', 'esp32_wifi_iic', 'esp8266_wifi', 'esp8266_serial', 'esp32_s2_wifi', 'esp32_s2_serial']

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3.3.0
    - run: git fetch --prune --unshallow

    - name: Cache pip
      uses: actions/cache@v3.2.2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache PlatformIO
      uses: actions/cache@v3.2.2
      with:
        path: ~/.platformio
        key: ${{ runner.os }}-${{ hashFiles('**/lockfiles') }}

    - name: Set up Python
      uses: actions/setup-python@v4.4.0

    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio

    - name: Build firmware
      run: |
        pio run -e ${{ matrix.pio_env }}
        # pio run -e ${{ matrix.pio_env }} --target buildfs
      # sh ./copy_bins.sh

    - name: Copy firmware
      continue-on-error: true
      run: |
        cp .pio/build/${{ matrix.pio_env }}/firmware.bin bin/${{ matrix.pio_env }}_firmware.bin

    - name: Copy partitions
      continue-on-error: true
      run: |
        cp .pio/build/${{ matrix.pio_env }}/partitions.bin bin/${{ matrix.pio_env }}_partitions.bin

    - name: Build filesystem
      run: |
        pio run -e ${{ matrix.pio_env }} --target buildfs
      # sh ./copy_bins.sh

    - name: Copy Spiffs
      continue-on-error: true
      run: |
        cp .pio/build/${{ matrix.pio_env }}/spiffs.bin bin/${{ matrix.pio_env }}_spiffs.bin

    - name: Copy LittleFS
      continue-on-error: true
      run: |
        cp .pio/build/${{ matrix.pio_env }}/littlefs.bin bin/${{ matrix.pio_env }}_littlefs.bin

    # - name: "Create Prerelease"
    #   uses: "marvinpinto/action-automatic-releases@latest"
    #   with:
    #     repo_token: "${{ secrets.GITHUB_TOKEN }}"
    #     prerelease: true
    #     files: |
    #       LICENSE
    #       bin/*.bin

    - name: Create Draft Release
      uses: softprops/action-gh-release@v1
      # if: startsWith(github.ref, 'refs/tags/')
      with:
        body: "Draft release"
        # note you'll typically need to create a personal access token
        # with permissions to create releases in the other repo
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        prerelease: true
        files: |
          LICENSE
          bin/*.bin
      env:
        GITHUB_REPOSITORY: thorrak/brewpi-esp8266